int findPos(vector<int> &inorder, int element, int n){
    for(int i = 0; i< n; i++){
        if(inorder[i] == element)
            return i;
    }
    return -1;
}
TreeNode<int>* solve(vector<int> inorder, vector<int> preorder, int &index, int inorderStart, int inorderEnd, int n){
    if(index >= n || inorderStart > inorderEnd)
        return NULL;
    
    int element = preorder[index++];
    TreeNode<int> *root = new TreeNode<int>(element);
    int pos = findPos(inorder, element, n);
    
    root->left = solve(inorder, preorder, index, inorderStart, pos-1, n);
    root->right = solve(inorder, preorder, index, pos+1, inorderEnd, n);
    
    return root;
}


TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
    int preOrderIndex = 0;
    int n = preorder.size();
    
    TreeNode<int>* ans = solve(inorder, preorder, preOrderIndex, 0, n-1, n);
    return ans;
}
